// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockManagement.Infrastructure.Persistence;

#nullable disable

namespace StockManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockManagement.Domain.Entities.AlerteStock", b =>
                {
                    b.Property<int>("IdAlerteStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlerteStock"));

                    b.Property<DateTime>("DateAlerte")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstResolue")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAlerteStock");

                    b.HasIndex("StockId");

                    b.ToTable("AlerteStocks", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Article", b =>
                {
                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArticle"));

                    b.Property<string>("CodeArticle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeBarre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<string>("Unite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdArticle");

                    b.HasIndex("FournisseurId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Capteur", b =>
                {
                    b.Property<int>("IdCapteur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCapteur"));

                    b.Property<string>("Emplacement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntrepotId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCapteur");

                    b.HasIndex("EntrepotId");

                    b.ToTable("Capteurs", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Entrepot", b =>
                {
                    b.Property<int>("IdEntrepot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEntrepot"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEntrepot");

                    b.ToTable("Entrepots", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Fournisseur", b =>
                {
                    b.Property<int>("IdFournisseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFournisseur"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFournisseur");

                    b.ToTable("Fournisseurs", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.HistoriqueTemperature", b =>
                {
                    b.Property<int>("IdHistorique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorique"));

                    b.Property<int>("CapteurId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMesure")
                        .HasColumnType("datetime2");

                    b.Property<float>("Valeur")
                        .HasColumnType("real");

                    b.HasKey("IdHistorique");

                    b.HasIndex("CapteurId");

                    b.ToTable("HistoriqueTemperatures", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Lot", b =>
                {
                    b.Property<int>("IdLot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLot"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLot");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("Lots", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.MouvementStock", b =>
                {
                    b.Property<int>("IdMouvement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMouvement"));

                    b.Property<DateTime>("DateMouvement")
                        .HasColumnType("datetime2");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMouvement");

                    b.HasIndex("LotId");

                    b.ToTable("MouvementStocks", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("IdStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStock"));

                    b.Property<int>("EntrepotId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("IdStock");

                    b.HasIndex("EntrepotId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Utilisateur", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilisateur"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("Utilisateurs", (string)null);
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.AlerteStock", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Stock", "Stock")
                        .WithMany("Alertes")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Article", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Articles")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Capteur", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Entrepot", "Entrepot")
                        .WithMany("Capteurs")
                        .HasForeignKey("EntrepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrepot");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.HistoriqueTemperature", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Capteur", "Capteur")
                        .WithMany("Historiques")
                        .HasForeignKey("CapteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capteur");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Lot", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Article", "Article")
                        .WithMany("Lots")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockManagement.Domain.Entities.Fournisseur", "Fournisseur")
                        .WithMany("Lots")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.MouvementStock", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Stock", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Entrepot", "Entrepot")
                        .WithMany("Stocks")
                        .HasForeignKey("EntrepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrepot");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Article", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Capteur", b =>
                {
                    b.Navigation("Historiques");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Entrepot", b =>
                {
                    b.Navigation("Capteurs");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Fournisseur", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Lots");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Stock", b =>
                {
                    b.Navigation("Alertes");
                });
#pragma warning restore 612, 618
        }
    }
}
